name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  lint-and-test:
    name: 代码检查和测试
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 代码格式检查
      run: npm run lint
      
    - name: 类型检查
      run: npm run check
      
    - name: 运行测试
      run: npm test
      
    - name: 生成测试覆盖率报告
      run: npm run test:coverage
      
    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # 安全扫描
  security-scan:
    name: 安全漏洞扫描
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 运行 npm audit
      run: npm audit --audit-level=moderate
      
    - name: 运行 Snyk 安全扫描
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # 构建应用
  build:
    name: 构建应用
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 构建应用
      run: npm run build
      
    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: dist/
        retention-days: 7

  # 构建 Docker 镜像
  build-docker:
    name: 构建 Docker 镜像
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录到容器注册表
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 构建并推送 Docker 镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到测试环境
  deploy-staging:
    name: 部署到测试环境
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 部署到测试环境
      run: |
        echo "部署到测试环境..."
        # 这里添加实际的部署脚本
        
    - name: 运行集成测试
      run: |
        echo "运行集成测试..."
        # 这里添加集成测试脚本
        
    - name: 通知部署状态
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # 部署到生产环境
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 部署到生产环境
      run: |
        echo "部署到生产环境..."
        # 这里添加实际的部署脚本
        
    - name: 健康检查
      run: |
        echo "执行健康检查..."
        # 这里添加健康检查脚本
        
    - name: 通知部署成功
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: '🚀 Med Agentic-AI 已成功部署到生产环境！'

  # 性能测试
  performance-test:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 运行性能测试
      run: |
        echo "运行性能测试..."
        # 这里添加性能测试脚本，如 k6, artillery 等
        
    - name: 上传性能测试报告
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html

  # 自动化依赖更新
  dependency-update:
    name: 依赖更新检查
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 检查过时的依赖
      run: npm outdated
      
    - name: 更新依赖
      run: |
        npm update
        npm audit fix
        
    - name: 创建 Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: '🔄 自动依赖更新'
        body: |
          ## 📦 依赖更新
          
          这是一个自动生成的 Pull Request，用于更新项目依赖。
          
          ### 更新内容
          - 更新所有可更新的依赖包
          - 修复已知的安全漏洞
          
          ### 验证清单
          - [ ] 所有测试通过
          - [ ] 安全扫描通过
          - [ ] 构建成功
          
          由 GitHub Actions 自动创建。
        branch: chore/update-dependencies 
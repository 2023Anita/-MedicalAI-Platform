version: '3.8'

services:
  # 主应用服务
  app:
    build: .
    container_name: medical-ai-app
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:medicalai2024@db:5432/medical_ai
      - SESSION_SECRET=your_secure_session_secret_change_in_production
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
    depends_on:
      - db
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - medical-ai-network

  # PostgreSQL 数据库
  db:
    image: postgres:14-alpine
    container_name: medical-ai-db
    environment:
      - POSTGRES_DB=medical_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=medicalai2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - medical-ai-network

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    container_name: medical-ai-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - medical-ai-network

  # Nginx 反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: medical-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - medical-ai-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  medical-ai-network:
    driver: bridge 